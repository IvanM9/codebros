// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  role      Role     @default(CONSULTANT)
  phone     String?

  projects   Project[]
  consultant Consultant?

  @@map("users")
}

enum Role {
  MANAGER
  CONSULTANT
}

model Consultant {
  id                     String            @id @default(cuid())
  user                   User              @relation(fields: [userId], references: [id])
  userId                 String            @unique @map("user_id")
  projects               Project[]
  createdAt              DateTime          @default(now()) @map("created_at")
  updatedAt              DateTime          @updatedAt @map("updated_at")
  location               String?
  rate                   Float?
  timeZone               String?           @map("time_zone")
  employmentStatus       EmploymentStatus? @map("employment_status")
  availableHours         Int?              @map("available_hours")
  willingToTravel        Boolean?          @map("willing_to_travel")
  provisionForRemoteWork Boolean?          @map("provision_for_remote_work")
  feeFees                Float?            @map("fee_fees")
  portfolio              String?           @map("portfolio")
  linkedIn               String?
  github                 String?

  skills             Skill[]
  languages          Language[]
  experiences        Experience[]
  certifications     Certification[]
  projectConsultants ProjectConsultant[]

  @@map("consultants")
}

enum EmploymentStatus {
  FULL_TIME
  PART_TIME
  CONTRACT
}

model Skill {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  type      TypeSkill

  consultants Consultant[]
  projects    Project[]

  @@map("skills")
}

enum TypeSkill {
  HARD
  SOFT
}

model Language {
  id        String        @id @default(cuid())
  name      String
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  level     LevelLanguage

  consultants Consultant[]
  projects    Project[]

  @@map("languages")
}

enum LevelLanguage {
  BASIC
  INTERMEDIATE
  ADVANCED
  FLUENT
}

model Experience {
  id           String     @id @default(cuid())
  title        String
  company      String
  location     String
  startDate    DateTime   @map("start_date")
  endDate      DateTime   @map("end_date")
  position     String
  description  String
  industry     String
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  consultant   Consultant @relation(fields: [consultantId], references: [id])
  consultantId String     @map("consultant_id")

  @@map("experiences")
}

model Certification {
  id           String     @id @default(cuid())
  name         String
  authority    String
  license      String
  startDate    DateTime   @map("start_date")
  endDate      DateTime   @map("end_date")
  url          String
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  consultant   Consultant @relation(fields: [consultantId], references: [id])
  consultantId String     @map("consultant_id")

  @@map("certifications")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  manager     User     @relation(fields: [managerId], references: [id])
  managerId   String   @map("manager_id")

  requiredSkills     Skill[]
  requiredLanguages  Language[]
  consultants        Consultant[]
  projectConsultants ProjectConsultant[]

  @@map("projects")
}

model ProjectConsultant {
  id           String     @id @default(cuid())
  project      Project    @relation(fields: [projectId], references: [id])
  projectId    String     @map("project_id")
  consultant   Consultant @relation(fields: [consultantId], references: [id])
  consultantId String     @map("consultant_id")
  status       Boolean
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@map("project_consultants")
}
